#ifndef CONSTANTS
#define CONSTANTS

#include <array>
#include <string>
#include <unordered_map>
#include <bits/stdc++.h>

using namespace std;
using Bitboard = uint64_t;

const int White = 0;
const int Black = 1;

// Evaluation tables (64-element arrays)
const array<int, 64> pawnTable = {{0, 5, 5, -10, -10, 5, 5, 0,
                                   0, 10, -5, 0, 0, -5, 10, 0,
                                   0, 10, 10, 20, 20, 10, 10, 0,
                                   0, 5, 10, 25, 25, 10, 5, 0,
                                   5, 10, 20, 30, 30, 20, 10, 5,
                                   10, 20, 30, 40, 40, 30, 20, 10,
                                   50, 50, 50, 50, 50, 50, 50, 50,
                                   0, 0, 0, 0, 0, 0, 0, 0}};

const array<int, 64> knightTable = {{-50, -40, -30, -30, -30, -30, -40, -50,
                                     -40, -20, 0, 0, 0, 0, -20, -40,
                                     -30, 0, 10, 15, 15, 10, 0, -30,
                                     -30, 5, 15, 20, 20, 15, 5, -30,
                                     -30, 0, 15, 20, 20, 15, 0, -30,
                                     -30, 5, 10, 15, 15, 10, 5, -30,
                                     -40, -20, 0, 5, 5, 0, -20, -40,
                                     -50, -40, -30, -30, -30, -30, -40, -50}};

const array<int, 64> bishopTable = {{-20, -10, -10, -10, -10, -10, -10, -20,
                                     -10, 5, 0, 0, 0, 0, 5, -10,
                                     -10, 10, 10, 10, 10, 10, 10, -10,
                                     -10, 0, 10, 10, 10, 10, 0, -10,
                                     -10, 5, 5, 10, 10, 5, 5, -10,
                                     -10, 0, 5, 10, 10, 5, 0, -10,
                                     -10, 0, 0, 0, 0, 0, 0, -10,
                                     -20, -10, -10, -10, -10, -10, -10, -20}};

const array<int, 64> rookTable = {{0, 0, 0, 5, 5, 0, 0, 0,
                                   -5, 0, 0, 0, 0, 0, 0, -5,
                                   -5, 0, 0, 0, 0, 0, 0, -5,
                                   -5, 0, 0, 0, 0, 0, 0, -5,
                                   -5, 0, 0, 0, 0, 0, 0, -5,
                                   -5, 0, 0, 0, 0, 0, 0, -5,
                                   5, 10, 10, 10, 10, 10, 10, 5,
                                   0, 0, 0, 0, 0, 0, 0, 0}};

const array<int, 64> queenTable = {{-20, -10, -10, -5, -5, -10, -10, -20,
                                    -10, 0, 0, 0, 0, 0, 0, -10,
                                    -10, 0, 5, 5, 5, 5, 0, -10,
                                    -5, 0, 5, 5, 5, 5, 0, -5,
                                    0, 0, 5, 5, 5, 5, 0, -5,
                                    -10, 5, 5, 5, 5, 5, 0, -10,
                                    -10, 0, 5, 0, 0, 0, 0, -10,
                                    -20, -10, -10, -5, -5, -10, -10, -20}};

const array<int, 64> kingOpeningTable = {{20, 30, 10, 0, 0, 10, 30, 20,
                                          20, 20, 0, 0, 0, 0, 20, 20,
                                          -10, -20, -20, -20, -20, -20, -20, -10,
                                          -20, -30, -30, -40, -40, -30, -30, -20,
                                          -30, -40, -40, -50, -50, -40, -40, -30,
                                          -30, -40, -40, -50, -50, -40, -40, -30,
                                          -30, -40, -40, -50, -50, -40, -40, -30,
                                          -30, -40, -40, -50, -50, -40, -40, -30}};

const array<int, 64> kingEndgameTable = {{-50, -30, -30, -30, -30, -30, -30, -50,
                                          -30, -30, 0, 0, 0, 0, -30, -30,
                                          -30, -10, 20, 30, 30, 20, -10, -30,
                                          -30, -10, 30, 40, 40, 30, -10, -30,
                                          -30, -10, 30, 40, 40, 30, -10, -30,
                                          -30, -10, 20, 30, 30, 20, -10, -30,
                                          -30, -20, -20, 0, 0, -20, -20, -30,
                                          -50, -40, -30, -20, -20, -30, -40, -50}};

// ----- Attack Tables ----- //

// Attack tables for sliding pieces (bishop, rook, queen)
array<Bitboard, 64> bishopAttacks = {
    0x8040201008040200ULL, 0x0080402010080400ULL, 0x0000804020100804ULL, 0x0000008040201008ULL, 0x0000000080402010ULL, 0x0000000000804020ULL, 0x0000000000008040ULL, 0x0000000000000080ULL,
    0x4020100804020000ULL, 0x8040201008040000ULL, 0x0080402010080400ULL, 0x0000804020100804ULL, 0x0000008040201008ULL, 0x0000000080402010ULL, 0x0000000000804020ULL, 0x0000000000008040ULL,
    0x2010080402000000ULL, 0x4020100804000000ULL, 0x8040201008040000ULL, 0x0080402010080400ULL, 0x0000804020100804ULL, 0x0000008040201008ULL, 0x0000000080402010ULL, 0x0000000000804020ULL,
    0x1008040200000000ULL, 0x2010080400000000ULL, 0x4020100804000000ULL, 0x8040201008040000ULL, 0x0080402010080400ULL, 0x0000804020100804ULL, 0x0000008040201008ULL, 0x0000000080402010ULL,
    0x0804020000000000ULL, 0x1008040000000000ULL, 0x2010080400000000ULL, 0x4020100804000000ULL, 0x8040201008040000ULL, 0x0080402010080400ULL, 0x0000804020100804ULL, 0x0000008040201008ULL,
    0x0402000000000000ULL, 0x0804000000000000ULL, 0x1008040000000000ULL, 0x2010080400000000ULL, 0x4020100804000000ULL, 0x8040201008040000ULL, 0x0080402010080400ULL, 0x0000804020100804ULL,
    0x0200000000000000ULL, 0x0400000000000000ULL, 0x0804000000000000ULL, 0x1008040000000000ULL, 0x2010080400000000ULL, 0x4020100804000000ULL, 0x8040201008040000ULL, 0x0080402010080400ULL,
    0x0000000000000000ULL, 0x0200000000000000ULL, 0x0400000000000000ULL, 0x0804000000000000ULL, 0x1008040000000000ULL, 0x2010080400000000ULL, 0x4020100804000000ULL, 0x8040201008040000ULL};

array<Bitboard, 64> rookAttacks = {
    0x101010101017eULL, 0x202020202027cULL, 0x404040404047aULL, 0x8080808080876ULL, 0x1010101010106eULL, 0x2020202020205eULL, 0x4040404040403eULL, 0x8080808080807eULL,
    0x1010101017e00ULL, 0x2020202027c00ULL, 0x4040404047a00ULL, 0x8080808087600ULL, 0x10101010106e00ULL, 0x20202020205e00ULL, 0x40404040403e00ULL, 0x80808080807e00ULL,
    0x10101017e0100ULL, 0x20202027c0200ULL, 0x40404047a0400ULL, 0x8080808760800ULL, 0x101010106e1000ULL, 0x202020205e2000ULL, 0x404040403e4000ULL, 0x808080807e8000ULL,
    0x101017e010100ULL, 0x202027c020200ULL, 0x404047a040400ULL, 0x8080876080800ULL, 0x1010106e101000ULL, 0x2020205e202000ULL, 0x4040403e404000ULL, 0x8080807e808000ULL,
    0x1017e01010100ULL, 0x2027c02020200ULL, 0x4047a04040400ULL, 0x8087608080800ULL, 0x10106e10101000ULL, 0x20205e20202000ULL, 0x40403e40404000ULL, 0x80807e80808000ULL,
    0x17e0101010100ULL, 0x27c0202020200ULL, 0x47a0404040400ULL, 0x8760808080800ULL, 0x106e1010101000ULL, 0x205e2020202000ULL, 0x403e4040404000ULL, 0x807e8080808000ULL,
    0x7e010101010100ULL, 0x7c020202020200ULL, 0x7a040404040400ULL, 0x76080808080800ULL, 0x6e101010101000ULL, 0x5e202020202000ULL, 0x3e404040404000ULL, 0x7e808080808000ULL,
    0xe0101010101000ULL, 0xc0202020202000ULL, 0xa0404040404000ULL, 0x60808080808000ULL, 0x10101010101000ULL, 0x20202020202000ULL, 0x40404040404000ULL, 0x80808080808000ULL};

array<Bitboard, 64> queenAttacks = {
    0x804020100804020ULL, 0x0080402010080400ULL, 0x0000804020100804ULL, 0x0000008040201008ULL, 0x0000000080402010ULL, 0x0000000000804020ULL, 0x0000000000008040ULL, 0x0000000000000080ULL,
    0x40201008040201ULL, 0x8040201008040202ULL, 0x0080402010080404ULL, 0x0000804020100808ULL, 0x0000008040201010ULL, 0x0000000080402020ULL, 0x0000000000804040ULL, 0x0000000000008080ULL,
    0x20100804020100ULL, 0x40201008040201ULL, 0x80402010080402ULL, 0x00804020100804ULL, 0x00008040201008ULL, 0x00000080402010ULL, 0x00000000804020ULL, 0x00000000008040ULL,
    0x100804020100ULL, 0x20100804020100ULL, 0x40201008040201ULL, 0x80402010080402ULL, 0x00804020100804ULL, 0x00008040201008ULL, 0x00000080402010ULL, 0x00000000804020ULL,
    0x080402010000ULL, 0x100804020100ULL, 0x20100804020100ULL, 0x40201008040201ULL, 0x80402010080402ULL, 0x00804020100804ULL, 0x00008040201008ULL, 0x00000080402010ULL,
    0x040201000000ULL, 0x080402010000ULL, 0x100804020100ULL, 0x20100804020100ULL, 0x40201008040201ULL, 0x80402010080402ULL, 0x00804020100804ULL, 0x00008040201008ULL,
    0x020100000000ULL, 0x040201000000ULL, 0x080402010000ULL, 0x100804020100ULL, 0x20100804020100ULL, 0x40201008040201ULL, 0x80402010080402ULL, 0x00804020100804ULL,
    0x010000000000ULL, 0x020100000000ULL, 0x040201000000ULL, 0x080402010000ULL, 0x100804020100ULL, 0x20100804020100ULL, 0x40201008040201ULL, 0x80402010080402ULL};

// Attack tables for knight
array<Bitboard, 64> knightAttacks = {
    0x20400ULL, 0x50800ULL, 0xa1100ULL, 0x142200ULL, 0x284400ULL, 0x508800ULL, 0xa01000ULL, 0x402000ULL,
    0x2040004ULL, 0x5080008ULL, 0xa110011ULL, 0x14220022ULL, 0x28440044ULL, 0x50880088ULL, 0xa0100010ULL, 0x40200020ULL,
    0x204000402ULL, 0x508000805ULL, 0xa1100110aULL, 0x1422002214ULL, 0x2844004428ULL, 0x5088008850ULL, 0xa0100010a0ULL, 0x4020002040ULL,
    0x20400040200ULL, 0x50800080500ULL, 0xa1100110a00ULL, 0x142200221400ULL, 0x284400442800ULL, 0x508800885000ULL, 0xa0100010a000ULL, 0x402000204000ULL,
    0x2040004020000ULL, 0x5080008050000ULL, 0xa1100110a0000ULL, 0x14220022140000ULL, 0x28440044280000ULL, 0x50880088500000ULL, 0xa0100010a00000ULL, 0x40200020400000ULL,
    0x204000402000000ULL, 0x508000805000000ULL, 0xa1100110a000000ULL, 0x1422002214000000ULL, 0x2844004428000000ULL, 0x5088008850000000ULL, 0xa0100010a0000000ULL, 0x4020002040000000ULL,
    0x4000402000000000ULL, 0x8000805000000000ULL, 0x1100110a00000000ULL, 0x2200221400000000ULL, 0x4400442800000000ULL, 0x8800885000000000ULL, 0x100010a000000000ULL, 0x2000204000000000ULL,
    0x402000000000000ULL, 0x805000000000000ULL, 0x110a00000000000ULL, 0x2214000000000000ULL, 0x4428000000000000ULL, 0x8850000000000000ULL, 0x10a0000000000000ULL, 0x2040000000000000ULL};

// Attack tables for king
array<Bitboard, 64> kingAttacks = {
    0x302ULL, 0x705ULL, 0xe0aULL, 0x1c14ULL, 0x3828ULL, 0x7050ULL, 0xe0a0ULL, 0xc040ULL,
    0x30203ULL, 0x70507ULL, 0xe0a0eULL, 0x1c141cULL, 0x382838ULL, 0x705070ULL, 0xe0a0e0ULL, 0xc040c0ULL,
    0x3020303ULL, 0x7050707ULL, 0xe0a0e0eULL, 0x1c141c14ULL, 0x38283828ULL, 0x70507050ULL, 0xe0a0e0a0ULL, 0xc040c040ULL,
    0x302030300ULL, 0x705070700ULL, 0xe0a0e0e00ULL, 0x1c141c1400ULL, 0x3828382800ULL, 0x7050705000ULL, 0xe0a0e0a000ULL, 0xc040c04000ULL,
    0x30203030000ULL, 0x70507070000ULL, 0xe0a0e0e0000ULL, 0x1c141c140000ULL, 0x382838280000ULL, 0x705070500000ULL, 0xe0a0e0a00000ULL, 0xc040c0400000ULL,
    0x3020303000000ULL, 0x7050707000000ULL, 0xe0a0e0e00000ULL, 0x1c141c14000000ULL, 0x38283828000000ULL, 0x70507050000000ULL, 0xe0a0e0a000000ULL, 0xc040c040000000ULL,
    0x302030300000000ULL, 0x705070700000000ULL, 0xe0a0e0e0000000ULL, 0x1c141c1400000000ULL, 0x3828382800000000ULL, 0x7050705000000000ULL, 0xe0a0e0a00000000ULL, 0xc040c04000000000ULL,
    0x2030300000000000ULL, 0x5070700000000000ULL, 0xa0e0e00000000000ULL, 0x141c140000000000ULL, 0x2838280000000000ULL, 0x5070500000000000ULL, 0xa0e0a00000000000ULL, 0x40c0400000000000ULL};

// Attack tables for pawn
array<Bitboard, 2> pawnAttacks = {
    0x20000000000000ULL, 0x50000000000000ULL};

// ----- Magic Bitboards ----- //

// Rook magic numbers
array<Bitboard, 64> rookMagics = {
    0x8a80104000800020ULL, 0x140002000100040ULL, 0x2801880a0017001ULL, 0x100081001000420ULL,
    0x200020010080420ULL, 0x3001c0002010008ULL, 0x8480008002000100ULL, 0x2080088004402900ULL,
    0x800098204000ULL, 0x2024401000200040ULL, 0x100802000801000ULL, 0x120800800801000ULL,
    0x208808088000400ULL, 0x2802200800400ULL, 0x2200800100020080ULL, 0x801000060821100ULL,
    0x80044006422000ULL, 0x100808020004000ULL, 0x12108a0010204200ULL, 0x140848010000802ULL,
    0x481828014002800ULL, 0x8094004002004100ULL, 0x4010040010010802ULL, 0x20008806104ULL,
    0x100400080208000ULL, 0x2040002120081000ULL, 0x21200680100081ULL, 0x20100080080080ULL,
    0x2000a00200410ULL, 0x20080800400ULL, 0x80088400100102ULL, 0x80004600042881ULL,
    0x4040008040800020ULL, 0x440003000200801ULL, 0x4200011004500ULL, 0x188020010100100ULL,
    0x14800401802800ULL, 0x2080040080800200ULL, 0x124080204001001ULL, 0x200046502000484ULL,
    0x480400080088020ULL, 0x1000422010034000ULL, 0x30200100110040ULL, 0x100021010009ULL,
    0x200011008000ULL, 0x20060200201100ULL, 0x200204620001000ULL, 0x20408102000ULL,
    0x200000902002080ULL, 0x2082204020000ULL, 0x900042008000ULL, 0x200081201000ULL,
    0x1001101002001100ULL, 0x100300408100100ULL, 0x4000002601420000ULL, 0x2770031000ULL,
    0x40040080080080ULL, 0x860000204080ULL, 0x18080201000201ULL, 0x200100021100ULL,
    0x20400040080080ULL, 0x9004000800800200ULL};

// Bishop magic numbers
array<Bitboard, 64> bishopMagics = {
    0x40040844404084ULL, 0x200420001000420ULL, 0x10190041080202ULL, 0x108060845042010ULL,
    0x581104180800210ULL, 0x2112080446200010ULL, 0x1080820820060210ULL, 0x3c0808410220200ULL,
    0x4050404440404ULL, 0x21001420010824ULL, 0x24d0080801082102ULL, 0x1020a0a020400ULL,
    0x40308200402ULL, 0x4011002100800ULL, 0x401484104104005ULL, 0x801010402020200ULL,
    0x1003001000090020ULL, 0x8402100044208ULL, 0x82080240060ULL, 0x208808410105000ULL,
    0x40002010004000ULL, 0x200552406000ULL, 0x200081201200ULL, 0x1080150204008ULL,
    0x608001004200ULL, 0x2100a041000ULL, 0x168030180900ULL, 0x40c00242008ULL,
    0x2010100a041000ULL, 0x10010040820800ULL, 0x4000800380400ULL, 0x80010024020800ULL,
    0x22878001e24000ULL, 0x5001112000400ULL, 0xa020080104200ULL, 0x2010004880111000ULL,
    0x602000888400ULL, 0x40000205110040ULL, 0x100089202000ULL, 0x400080230008ULL,
    0x10301802830400ULL, 0x332a4081140200ULL, 0x1808085801800ULL, 0x200202001008080ULL,
    0x8010404000200ULL, 0x8004200962a00220ULL, 0x1000042011036000ULL, 0x4301083214000150ULL,
    0x204026458e001401ULL, 0x40100400809000ULL, 0x80042000a024487eULL, 0x42010201811a2200ULL,
    0x910021000a098042ULL, 0x168900420001041ULL, 0x1001a01050084e00ULL, 0x900040042041180ULL,
    0x201400400a022110ULL, 0x1200080a04130410ULL, 0x200891820001108ULL, 0x100100440208200ULL,
    0x204000206a080850ULL, 0x212006811700900ULL, 0x1080204000421000ULL, 0x4008142004410100ULL};

// ----- Values ----- //

// Material values
unordered_map<string, int> pieceValues = {
    {"p", 10}, {"n", 32}, {"b", 33}, {"r", 50}, {"q", 90}, {"k", 2000}};

unordered_map<string, int> eventValues = {
    {"checkmate", 1000},
    {"stalemate", 0},
    {"draw", 0},
    {"check", 25},
    {"promotion", 50},
    {"castling", 50},
    {"fork", 50}};

// ----- Board and Move Types ----- //
struct Board
{
    // White pieces
    Bitboard wp = 0, wn = 0, wb = 0, wr = 0, wq = 0, wk = 0;
    // Black pieces
    Bitboard bp = 0, bn = 0, bb = 0, br = 0, bq = 0, bk = 0;
    int Turn = White;
};

struct Move
{
    int from;
    int to;
    string toString() const
    {
        char fromFile = 'a' + (from % 8);
        char toFile = 'a' + (to % 8);
        int fromRank = (from / 8) + 1;
        int toRank = (to / 8) + 1;
        ostringstream oss;
        oss << fromFile << fromRank << toFile << toRank;
        return oss.str();
    }
};

#endif
